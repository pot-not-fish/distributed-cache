// Code generated by Kitex v0.7.1. DO NOT EDIT.

package cacheservice

import (
			"context"
				client "github.com/cloudwego/kitex/client"
				kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
				node "kv-cache/pkg/kitex_gen/node"
)

func serviceInfo() *kitex.ServiceInfo {
	return cacheServiceServiceInfo
 }

var cacheServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CacheService"
	handlerType := (*node.CacheService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetKey":
			kitex.NewMethodInfo(getKeyHandler, newCacheServiceGetKeyArgs, newCacheServiceGetKeyResult, false),
		"SetKey":
			kitex.NewMethodInfo(setKeyHandler, newCacheServiceSetKeyArgs, newCacheServiceSetKeyResult, false),
		"DelKey":
			kitex.NewMethodInfo(delKeyHandler, newCacheServiceDelKeyArgs, newCacheServiceDelKeyResult, false),
		"SetGroup":
			kitex.NewMethodInfo(setGroupHandler, newCacheServiceSetGroupArgs, newCacheServiceSetGroupResult, false),
		"GetAll":
			kitex.NewMethodInfo(getAllHandler, newCacheServiceGetAllArgs, newCacheServiceGetAllResult, false),
		"GetAllGroup":
			kitex.NewMethodInfo(getAllGroupHandler, newCacheServiceGetAllGroupArgs, newCacheServiceGetAllGroupResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":	 "node",
		"ServiceFilePath": "..\\idl\\node.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName: 	 serviceName,
		HandlerType: 	 handlerType,
		Methods:     	 methods,
		PayloadCodec:  	 kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}



func getKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*node.CacheServiceGetKeyArgs)
	realResult := result.(*node.CacheServiceGetKeyResult)
	success, err := handler.(node.CacheService).GetKey(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newCacheServiceGetKeyArgs() interface{} {
	return node.NewCacheServiceGetKeyArgs()
}

func newCacheServiceGetKeyResult() interface{} {
	return node.NewCacheServiceGetKeyResult()
}


func setKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*node.CacheServiceSetKeyArgs)
	realResult := result.(*node.CacheServiceSetKeyResult)
	success, err := handler.(node.CacheService).SetKey(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newCacheServiceSetKeyArgs() interface{} {
	return node.NewCacheServiceSetKeyArgs()
}

func newCacheServiceSetKeyResult() interface{} {
	return node.NewCacheServiceSetKeyResult()
}


func delKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*node.CacheServiceDelKeyArgs)
	realResult := result.(*node.CacheServiceDelKeyResult)
	success, err := handler.(node.CacheService).DelKey(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newCacheServiceDelKeyArgs() interface{} {
	return node.NewCacheServiceDelKeyArgs()
}

func newCacheServiceDelKeyResult() interface{} {
	return node.NewCacheServiceDelKeyResult()
}


func setGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*node.CacheServiceSetGroupArgs)
	realResult := result.(*node.CacheServiceSetGroupResult)
	success, err := handler.(node.CacheService).SetGroup(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newCacheServiceSetGroupArgs() interface{} {
	return node.NewCacheServiceSetGroupArgs()
}

func newCacheServiceSetGroupResult() interface{} {
	return node.NewCacheServiceSetGroupResult()
}


func getAllHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*node.CacheServiceGetAllArgs)
	realResult := result.(*node.CacheServiceGetAllResult)
	success, err := handler.(node.CacheService).GetAll(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newCacheServiceGetAllArgs() interface{} {
	return node.NewCacheServiceGetAllArgs()
}

func newCacheServiceGetAllResult() interface{} {
	return node.NewCacheServiceGetAllResult()
}


func getAllGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error { 
	realArg := arg.(*node.CacheServiceGetAllGroupArgs)
	realResult := result.(*node.CacheServiceGetAllGroupResult)
	success, err := handler.(node.CacheService).GetAllGroup(ctx, realArg.Request)
	if err != nil {
	return err
	}
	realResult.Success = success
	return nil 
}
func newCacheServiceGetAllGroupArgs() interface{} {
	return node.NewCacheServiceGetAllGroupArgs()
}

func newCacheServiceGetAllGroupResult() interface{} {
	return node.NewCacheServiceGetAllGroupResult()
}


type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}


func (p *kClient) GetKey(ctx context.Context , request *node.GetKeyRequest) (r *node.GetKeyResponse, err error) {
	var _args node.CacheServiceGetKeyArgs
	_args.Request = request
	var _result node.CacheServiceGetKeyResult
	if err = p.c.Call(ctx, "GetKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetKey(ctx context.Context , request *node.SetKeyRequest) (r *node.SetKeyResponse, err error) {
	var _args node.CacheServiceSetKeyArgs
	_args.Request = request
	var _result node.CacheServiceSetKeyResult
	if err = p.c.Call(ctx, "SetKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelKey(ctx context.Context , request *node.DelKeyRequest) (r *node.DelKeyResponse, err error) {
	var _args node.CacheServiceDelKeyArgs
	_args.Request = request
	var _result node.CacheServiceDelKeyResult
	if err = p.c.Call(ctx, "DelKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetGroup(ctx context.Context , request *node.SetGroupRequest) (r *node.SetGroupResponse, err error) {
	var _args node.CacheServiceSetGroupArgs
	_args.Request = request
	var _result node.CacheServiceSetGroupResult
	if err = p.c.Call(ctx, "SetGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAll(ctx context.Context , request *node.GetAllKeysRequest) (r *node.GetAllKeysResponse, err error) {
	var _args node.CacheServiceGetAllArgs
	_args.Request = request
	var _result node.CacheServiceGetAllResult
	if err = p.c.Call(ctx, "GetAll", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllGroup(ctx context.Context , request *node.GetAllGroupsRequest) (r *node.GetAllGroupsResponse, err error) {
	var _args node.CacheServiceGetAllGroupArgs
	_args.Request = request
	var _result node.CacheServiceGetAllGroupResult
	if err = p.c.Call(ctx, "GetAllGroup", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

